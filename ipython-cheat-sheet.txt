who - brings up list of known variables
who int - shows known variables in namespace that are ints
whos shows all variables in namespace and their type and value
psearch varname int - returns the variable starting with varname* of type int
store var - allows setting of a variable and its value to ipython profile
store var > /tmp/a.txt  - set a variable's value into a file
store - no arguments shows all the stored variables with their values 
reset - deletes all the stored variables held by the 'in-db' of ipython
store -r  - recovers the previously held variable names
store -z whacks held variables completely.

Logging
logstate - reports status of ipython logging (writes to ipython_log.py as default)
logstart - starts logging of session
logon - starts logging
logoff - toggles logging off

lsmagic - shows list of all magic commands
%magic_command_name - requires percent if there is another variable in the namespace of the same name.  (assumes automagic set on)
magic - provids scrolling help on magic commands

lsmagic? - ? on end shows help
lsmagic?? - provides still more information with source
yourvarname? - will show python doc on the variable

p is shorthand for print -> p sys.path
page - pretty prints -> page sys.path

Method Shorthands
A method def x(a, b)
            print a, b
- can be invoked as x 4, 5
- can be invoked with string arguments by prefixing method name with a comma
   ,x 3, 4

A callable method without args can also be invoked with /x and ipython will run the method
** iPython will display a line showing the translation to the method call and then print the result **

Help System
iPython integrates with pydocs system
help(sys)
help('for')  help on keyword
help('FOR') - caps shows you the topic
help() - takes you to help subsystem
    type topics and it brings up a list of topics to get help on
help TOPIC label

pdef re.match [returns:  re.match(pattern, string, flags=0)]
pdoc re.match - displays pydoc string
pinfo - returns the pdef and pdoc +
psource re.match  - shows source code
re.match?? same as pinfo
re.match?
pfile re.match - navigates to top of page of the source file for function
edit -x re.match - opens the source file in the editor set in your profile

******************************
showmedo video 2
can use commands to navigate
can use 'pushd /pathto/your/dir' to create a list of stored directories
dirs - displays the list  - > cd dirs[1] switches to the second directory in the list
popd pulls last added directory off of the list

Bookmarks
bookmark site /usr/lib/python2.4/site-packages
   'site' is the bookmark name so 'cd site' switches to the site-packages dir
%bookmark -l  -> lists the bookmark with the location stored for it.

Can store bookmarks with store command

dhist - displays the history of directories visited as a numbered list
cd -1  - switches to the numbered directory listed

!ls - runs the ls command (actually already defined as an alias - see below - so the ! is really for example and not required for this command)

Using python variables in the namespace as shell variables
patt = "*.py"
!ls -l $patt  - lists only the .py files in the directory

Can add to the pattern since it is a shell variable
!ls ${patt+'c'}  - displays .pyc files

Aliases
alias - displays the build in aliases that come with iPython
alias pr echo You Said: %s
   pr Hello -> prints You Said: Hello
unalias - removes an alias - they don't persist across sessions by default

User Defined Functions with Mix of Namespace Defined Variables and Shell Commands
patt = "*.py"

def go(patt=patt):
    !ls -l $patt

go() or go("*.so")

Can set variable equal to output of a shell command
x=!ls # returns a numbered list
x.s shows the list as a long string
x.l returns list
len(x)
x = !ls *.py | sort (of course ls does this sort too)


Running and Viewing Scripts
pycat - shows source 

Running a program leaves the variables in the local namespace

A namespace can be seeded by passing in a namespace to iPython run caommand

run - starts script with main method but has options to not use main

run -p calc  - profiles the calc program
run -d calc - starts up the calc program with the debugger.
run? - shows the options using the iPython help system.

*************************
showmedo iPython video 3
[15]  is the number in the iPython history caching
Ctrl-P, Ctrl-N, tab completion, etc
_i - shows last command
_ii - shows two commands back
_i1 - shows fist

In[3] - global variable that shows third command
hist - shows last 20 or so history
hist 1 10 - shows range of last 10 commands
 (_ip.magic("hist") is the magic command to get the list that shows up in list
hist -r removes the magic
hist 10 - last 10 commands

del varname - removes it from namespace

exec _i3 - executes the third command in history list
exec In[1:4] - execute the commands in the range in the list

Alias command history
macro begin 1-4 5
- - Can now type begin and it executes the defined history

Editing Files
pycat - color coded version of cat for python files (any files but python syntax highlighting)
edit /tmp/def.py - brings up defined $EDITOR
save a couple of variables in the file

run def.py from the iPython prompt will load the variables into the local namespace
Any addition to the file by using the edit def.py command will load the new variables or function defs into the local namespace.  Validate this by running whoshist

save apple 1-3 - saves off the 3 lines of history to the file apple.py

%ed line# - if you know if or %ed first letter-tab complete to bring up a function definition in command line history.  Actually changes the local namespace version of the stored var or function when you save and close the editor.

cpaste - paste in source as is from an outside source

Out is global variable for the output of iPython commands
Out[130] - displays the output of the command from line 130
    the Output var is a dictionary and you can execute operations on it.

Executing a function but ending the invocation with a semicolon makes just the return value appear - no intermediate print statement echos to screen will display.

runlog [logfile name] - executes the specified logfile and wraps each file in a try-except so that they will be handled cleanly.

Debugging & Profiling
xmode Plain  - - simple trace
xmode Context - - provides context around exception
xmode Verbose - - tells you what the arguments were that went into the call!!

pdb - turns on automatic pdb execution when an uncaught exception is encountered
q returns you out of debugger
run -d ProgramName  - - runs program in pdb

debug - - drops you into pdb mode in the current namespace to work

Embed the iPython shellin a program so that it is called as part of the programs execution.  The namespace in the embedded shell is a subshell of iPython

from IPython.Shell import IPShellEmbed
ipshell = IPShellEmbed()
ipshell()

run progname - is the way to invoke the script with the embedded iPython instance.  Don't need to suffix it with .py - run knows what to do.

Profiling
In [188]: time sum(range(10000000))
CPU times: user 2.53 s, sys: 0.19 s, total: 2.71 s
Wall time: 2.91 s

Out[189]: 49999995000000L

timeit is a finer resolution time that will run the routine multiple times to find out the best one to use.  timeit doesn't every print output - time does.  Reminder, the output can be suppressed by ending the call with a semicolon

prun - runs expressions (not files)using the python profiler.

run -p filename (same as prun but reversed - runs files not expressions).

bg gofetch.py
jobs[0] shows first job executed
jobs[0].status - displays status
jobs[0].results - displays results of command.
